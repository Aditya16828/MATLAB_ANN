function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 11-Feb-2023 08:19:46.
% 
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [100;1;10];
x1_step1.gain = [0.025;1;0.04];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.136801034632542784;-3.7645960403421767637;-0.85574911894504213095;-0.71713591288829026116;-0.39158964117977468344;0.29308519986927322742;3.4441914305290719511;-2.4340111215706383696];
IW1_1 = [1.7305653723742602246 -0.29571705243167456523 1.6082625984123000151;1.5047295171696994931 1.7815604010410048819 0.76482125903259434718;-0.55416445482954757029 0.10615207186516195659 2.201279419756376754;-2.1667257197157838711 0.17940399854164934546 3.3923638745545150464;1.8016716854084589006 -0.055072503379906011245 1.3609746646417979488;-2.5178833078921707411 3.3845907482424406609 1.9435483853349067029;-0.038179593183206059215 0.76061373144409794023 -3.6174262874558795744;-2.2090505841310483781 0.34231441996640787906 -0.85729155194753448033];

% Layer 2
b2 = -0.27719056678035602914;
LW2_1 = [-0.068506012063379917443 -0.04742866540435346917 -0.49751652469715268445 0.33590894797019776874 0.95968425113241151436 0.029701841107398478659 0.084745094740961326996 -0.35732733513688480498];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.02255299954894;
y1_step1.xoffset = 5.9;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
